{"version":3,"sources":["assets/logo.svg","shared.ts","components/SuiteLogoItem.tsx","components/SuiteLogo.tsx","pages/HomePage.tsx","pages/SignIn.tsx","assets/icons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","appLogo","require","phrases","getPhrase","keyword","countryCode","undefined","_phrases","navigator","language","toLowerCase","indexOf","proxy","gitHubApiQuery","gitHubAccess","url","a","caching","headers","token_type","access_token","Utilities","fetchData","method","res","json","treeResponse","SuiteLogoItem","item","useState","files","setFiles","dropdownOpen","setDropdownOpen","fetchFiles","useEffect","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","name","DropdownMenu","map","file","key","sha","className","href","download_url","target","rel","SuiteLogo","contents","setContents","svgItem","setSvgItem","fetchContents","forEach","svgContents","src","alt","ButtonGroup","HomePage","tree","logo","appTitle","containerClass","SignIn","setGitHubAccess","title","clientId","redirectUri","onSuccess","code","fetch","access","localStorage","setItem","JSON","stringify","onFailure","response","console","error","setAlertMessage","toString","scope","Date","getFullYear","GitHubIcon","xmlns","width","height","viewBox","fill","d","Auth","App","fromStorage","getItem","parse","expandSidebar","sidebarToggleIconComponent","pages","component","bottomContent","onClick","removeItem","icon","label","isHome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,kC,+JCE9BC,EAAUC,EAAQ,IAOlBC,EAAoB,CAC7B,UAAW,CAAC,SAAU,UACtB,uBAAwB,CAAC,uBAAwB,0BACjD,oCAAqC,CAAC,oCAAqC,qDAC3E,uBAAwB,CAAC,uBAAwB,6BACjD,iBAAkB,CAAC,iBAAkB,2BACrC,QAAW,CAAC,UAAW,aACvB,sBAAuB,CAAC,sBAAuB,wBAG5C,SAASC,EAAUC,GAA2G,IAA1FC,EAAyF,4DAAvDC,EAAWC,EAA4C,4DAAXD,EAIrH,OAHAD,EAAcA,GAAgBG,UAAUC,SAAUC,cAAcC,QAAQ,OAAS,EAAI,QAAU,SAC/FJ,EAAWA,GAAYL,GAEVE,GACLC,EAAYM,QAAQ,QAAU,EACvBJ,EAASH,GAAS,GAGlBG,EAASH,GAAS,GAItBA,EAIR,IACMQ,EAAQ,+BAgDd,SAAeC,EAAtB,oC,4CAAO,WAA8BC,EAA4BC,GAA1D,iCAAAC,EAAA,6DAAuEC,IAAvE,iCACCC,EAAU,CACV,cAAgB,GAAhB,OAAoBJ,EAAaK,WAAjC,YAA+CL,EAAaM,cAC5D,eAAgB,mBAChB,gBAAiB,aAGL,IAAZH,IACAC,EAAQ,iBAAmB,YAR5B,SAWeG,YAAUC,UAAV,UAAuBV,GAAvB,OAA+BG,GAAO,CACpDQ,OAAQ,MACRL,YAbD,cAWGM,EAXH,gBAgBwBA,EAAIC,OAhB5B,cAgBGC,EAhBH,yBAiBIA,GAjBJ,6C,0DC5EA,SAASC,EAAT,GAAoE,IAA3Cb,EAA0C,EAA1CA,aAAcc,EAA4B,EAA5BA,KAA4B,EAC5CC,mBAAuC,MADK,mBAC/DC,EAD+D,KACxDC,EADwD,OAE9BF,oBAAkB,GAFY,mBAE/DG,EAF+D,KAEjDC,EAFiD,KAKhEC,EAAU,uCAAG,4BAAAlB,EAAA,sEACKH,EAAeC,EAAcc,EAAKb,KAAK,GAD5C,OACTe,EADS,OAEfC,EAASD,GAFM,2CAAH,qDAWhB,OANAK,qBAAU,YACe,IAAjBH,GAAmC,OAAVF,GACzBI,MAEL,CAACF,IAGA,kBAACI,EAAA,EAAD,CAAgBC,OAAQL,EAAcM,OAdf,kBAAML,GAAiBD,KAe1C,kBAACO,EAAA,EAAD,CAAgBC,OAAK,GAChBZ,EAAKa,MAEV,kBAACC,EAAA,EAAD,KACe,OAAVZ,GACGA,EAAMa,KAAI,SAACC,GAAD,OACN,uBAAGC,IAAKD,EAAKE,IAAKC,UAAU,gBAAgBC,KAAMJ,EAAKK,aAAcC,OAAO,SAASC,IAAI,uBACpFP,EAAKH,WCxB3B,SAASW,EAAT,GAA4D,IAAvCtC,EAAsC,EAAtCA,aAAcc,EAAwB,EAAxBA,KAAwB,EAC9BC,mBAAuC,MADT,mBACvDwB,EADuD,KAC7CC,EAD6C,OAEhCzB,mBAA+B,MAFC,mBAEvD0B,EAFuD,KAE9CC,EAF8C,KAIxDC,EAAa,uCAAG,4BAAAzC,EAAA,sEACKH,EAAeC,EAAcc,EAAKb,KADvC,OACZsC,EADY,OAElBC,EAAYD,GAGZA,EAASK,QAAT,uCAAiB,WAAO9B,GAAP,iBAAAZ,EAAA,yDACK,QAAdY,EAAKa,KADI,gCAEiB5B,EAAeC,EAAcc,EAAKb,KAAK,GAFxD,QAEH4C,EAFG,QAGO,KACNJ,EAAUI,EAAY,GAC5BH,EAAWD,IALN,2CAAjB,uDALkB,2CAAH,qDAsBnB,OANApB,qBAAU,WACW,OAAbkB,GACAI,MAEL,CAACJ,IAGA,yBAAKN,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,yBAAKa,IAAG,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAASN,aAAcF,UAAU,OAAOc,IAAKjC,EAAKa,OAC5D,4BAAKtC,EAAUyB,EAAKa,OAEN,OAAbY,GACG,kBAACS,EAAA,EAAD,KACKT,EAASV,KAAI,SAACf,GAAD,OACV,kBAACD,EAAD,CAAekB,IAAKjB,EAAKkB,IAAKhC,aAAcA,EAAcc,KAAMA,WCIjFmC,MAvCf,YAAoD,IAAhCjD,EAA+B,EAA/BA,aAA+B,EACfe,mBAAuC,MADxB,mBACxCwB,EADwC,KAC9BC,EAD8B,KAGzCG,EAAa,uCAAG,WAAOO,GAAP,eAAAhD,EAAA,sEACKH,EAAeC,EAAe,4EADnC,OACZuC,EADY,OAElBC,EAAYD,GAFM,2CAAH,sDAWnB,OANAlB,qBAAU,WACe,OAAjBrB,GAAsC,OAAbuC,GACzBI,MAEL,CAAC3C,EAAcuC,IAGd,kBAAC,OAAD,KACI,kBAAC,SAAD,KACI,kBAAC,cAAD,CAAaY,KAAMjE,EAASkE,SHzBpB,sBG4BZ,kBAAC,OAAD,CAAMC,eAAe,kBACjB,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,eAAd,eACA,yBAAKA,UAAU,OACG,OAAbM,GACGA,EAASV,KAAI,SAACf,GAAD,OACT,kBAACwB,EAAD,CAAWtC,aAAcA,EAAe+B,IAAKjB,EAAKkB,IAAKlB,KAAMA,a,iCC5B1F,SAASwC,EAAT,GAAmD,IAAjCC,EAAgC,EAAhCA,gBACrB,OACI,kBAAC,QAAD,CAAOJ,KAAMjE,EAASsE,MJTN,oBIUZ,yBAAKvB,UAAU,eACX,uBAAGA,UAAU,QAAQ5C,EAAU,sCAE/B,kBAAC,IAAD,CACIoE,SJuB4G,uBItB5GC,YAAY,GACZC,UAAS,uCAAE,iCAAAzD,EAAA,6DAAS0D,EAAT,EAASA,KAAT,SACWC,MAAM,GAAD,OJgBjB,iDIhBiB,iBAA2BD,IAD3C,cACDlD,EADC,gBAE4BA,EAAIC,OAFhC,OAEDmD,EAFC,OAIPP,EAAgBO,GAChBC,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUJ,IAL7C,2CAAF,sDAOTK,UAAW,SAACC,GACRC,QAAQC,MAAMF,GACd7D,YAAUgE,gBAAgBH,EAASI,WAAY,UAAU,IAE7DC,MAAO,CAAC,OAAQ,QAChBxC,UAAU,2DAEV,kBAAC,IAAD,CAAeA,UAAU,SAjB7B,wBAoBA,yBAAKA,UAAU,QACX,uBAAGC,KAAK,6CAA6CE,OAAO,SAASC,IAAI,uBACpEhD,EAAU,0BAGnB,yBAAK4C,UAAU,QACX,wCACY,IAAIyC,MAAOC,cADvB,gCAC+D,uBAAGzC,KAAK,gDAAgDE,OAAO,SAASC,IAAI,uBAAuBhD,EAAU,mBAD5K,MACqM,uBAAG6C,KAAK,mCAAmC7C,EAAU,gBCzCvQ,IAAMuF,EAAa,kBACtB,yBACIC,MAAM,6BACNC,MAAM,MACNC,OAAO,MACPC,QAAQ,YACRC,KAAK,gBAEL,0BAAMC,EAAE,gsBCAhB,SAASC,EAAT,GAAuD,IAAvCnF,EAAsC,EAAtCA,aAAcuD,EAAwB,EAAxBA,gBAC1B,OAAqB,OAAjBvD,EACO,kBAACsD,EAAD,CAAQC,gBAAiBA,IAGzB,kBAAC,EAAD,CAAUvD,aAAcA,IAsDxBoF,MAlDf,WACI,IAAItB,EAAS,KACPuB,EAActB,aAAauB,QAAQ,gBACrCD,IACAvB,EAASG,KAAKsB,MAAMF,IAJb,MAO6BtE,mBAA8B+C,GAP3D,mBAOJ9D,EAPI,KAOUuD,EAPV,KAcX,OACI,kBAAC,OAAD,CACIiC,eAAa,EACbC,2BAA4B,kBAAC,IAAD,MAC5BC,MAAO,CACH,CACI/D,KAAM,OACNgE,UAAW,kBAACR,EAAD,CAAMnF,aAAcA,EAAcuD,gBAAiBA,OAItE,kBAAC,cAAD,CACIqC,cACI,yBAAK3D,UAAU,cACX,yBAAKA,UAAU,oBAEf,uBACIC,KAAK,sCACLE,OAAO,SAASC,IAAI,sBACpBJ,UAAU,sCAEV,kBAAC,EAAD,MALJ,IAKmB,0BAAMA,UAAU,0BAA0B5C,EAAU,0BAGrD,OAAjBW,GACG,kBAAC,WAAD,CAAU6F,QA9BlB,WACZ9B,aAAa+B,WAAW,gBACxBvC,EAAgB,OA4BgCwC,KAAM,kBAAC,IAAD,MAAkBC,MAAM,eAKtE,kBAAC,WAAD,CAAU9D,KAAK,IAAI6D,KAAM,kBAAC,IAAD,MAAWC,MAAM,OAAOC,QAAM,OCnDnDC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBjH,WACrBA,UAAUkH,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLD,QAAQC,MAAMA,EAAM4C,c","file":"static/js/main.fa941260.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7414e0dd.svg\";","import { Utilities } from \"blue-react\"\n\nexport const appLogo = require(\"./assets/logo.svg\")\nexport const appTitle = \"Corporate Design\"\n\ninterface IPhrases {\n    [key: string]: string[]\n}\n\nexport const phrases: IPhrases = {\n    \"bsw-cti\": [\"BSWCti\", \"BSWCti\"],\n    \"All assets on GitHub\": [\"All assets on GitHub\", \"Alle Assets auf GitHub\"],\n    \"Please sign in to see the content\": [\"Please sign in to see the content\", \"Bitte anmelden, um die Inhalte sehen zu können\"],\n    \"Get access to GitHub\": [\"Get access to GitHub\", \"Zugang zu GitHub bekommen\"],\n    \"Privacy policy\": [\"Privacy policy\", \"Datenschutzerklärung\"],\n    \"Imprint\": [\"Imprint\", \"Impressum\"],\n    \"Sign in with GitHub\": [\"Sign in with GitHub\", \"Anmelden mit GitHub\"]\n}\n\nexport function getPhrase(keyword: string, countryCode: string | undefined = undefined, _phrases: IPhrases | undefined = undefined) {\n    countryCode = countryCode || (navigator.language).toLowerCase().indexOf(\"de\") > -1 ? \"de-DE\" : \"en-US\"\n    _phrases = _phrases || phrases\n\n    if (_phrases[keyword]) {\n        if (countryCode.indexOf(\"de-\") > -1) {\n            return _phrases[keyword][1]\n        }\n        else {\n            return _phrases[keyword][0]\n        }\n    }\n    else {\n        return keyword\n    }\n}\n\nexport const gitHubOauthUrl = \"http://localhost:4000/login/oauth/access_token\"\nexport const proxy = \"http://localhost:4000/fetch/\"\n\n// In production (bruegmann.github.io) we need another client ID then in development (localhost:3000)\nexport const gitHubOauthClientId = (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") ? \"d64aa2c0928af6b72a90\" : \"0e88710af11826fb210a\"\n\nexport interface GitHubAccess {\n    access_token: string\n    token_type: string\n    scope: string\n}\n\nexport interface GitHubTreeResponse {\n    sha: string\n    url: string\n    truncated?: boolean\n    tree: GitHubTree[]\n}\n\nexport interface GitHubTree {\n    path: string\n    mode: string\n    type: string\n    sha: string\n    size: number\n    url: string\n}\n\nexport type GitHubContentResponse = GitHubContent[]\n\nexport interface GitHubContent {\n    download_url?: string\n    git_url: string\n    html_url: string\n    name: string\n    path: string\n    sha: string\n    size: number\n    type: string\n    url: string\n    _links: GitHubLink\n}\n\nexport interface GitHubLink {\n    git: string\n    html: string\n    self: string\n}\n\nexport async function gitHubApiQuery(gitHubAccess: GitHubAccess, url: string, caching: boolean = true): Promise<GitHubTreeResponse | GitHubContentResponse> {\n    let headers = {\n        \"Authorization\": `${gitHubAccess.token_type} ${gitHubAccess.access_token}`,\n        \"Content-Type\": \"application/json\",\n        \"cache-control\": \"no-cache\"\n    }\n\n    if (caching === false) {\n        headers[\"cache-control\"] = \"no-cache\"\n    }\n\n    const res = await Utilities.fetchData(`${proxy}${url}`, {\n        method: \"GET\",\n        headers\n    })\n\n    const treeResponse = await res.json()\n    return treeResponse\n}","import React, { useEffect, useState } from \"react\"\r\nimport { ButtonDropdown, DropdownMenu, DropdownToggle } from \"reactstrap\"\r\nimport { GitHubAccess, gitHubApiQuery, GitHubContent, GitHubContentResponse } from \"../shared\"\r\n\r\nexport interface SuiteLogoItemProps {\r\n    gitHubAccess: GitHubAccess\r\n    item: GitHubContent\r\n}\r\n\r\nexport function SuiteLogoItem({ gitHubAccess, item }: SuiteLogoItemProps) {\r\n    const [files, setFiles] = useState<GitHubContentResponse | null>(null)\r\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false)\r\n    const toggleDropdownOpen = () => setDropdownOpen(!dropdownOpen)\r\n\r\n    const fetchFiles = async () => {\r\n        const files = await gitHubApiQuery(gitHubAccess, item.url, false) as GitHubContentResponse\r\n        setFiles(files)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dropdownOpen === true && files === null) {\r\n            fetchFiles()\r\n        }\r\n    }, [dropdownOpen])\r\n\r\n    return (\r\n        <ButtonDropdown isOpen={dropdownOpen} toggle={toggleDropdownOpen}>\r\n            <DropdownToggle caret>\r\n                {item.name}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {files !== null &&\r\n                    files.map((file: GitHubContent) =>\r\n                        <a key={file.sha} className=\"dropdown-item\" href={file.download_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            {file.name}\r\n                        </a>\r\n                    )\r\n                }\r\n            </DropdownMenu>\r\n        </ButtonDropdown>\r\n    )\r\n    // }\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { ButtonGroup } from \"reactstrap\"\r\nimport { getPhrase, GitHubAccess, gitHubApiQuery, GitHubContent, GitHubContentResponse } from \"../shared\"\r\nimport { SuiteLogoItem } from \"./SuiteLogoItem\"\r\n\r\nexport interface SuiteLogoProps {\r\n    gitHubAccess: GitHubAccess\r\n    item: GitHubContent\r\n}\r\n\r\nexport function SuiteLogo({ gitHubAccess, item }: SuiteLogoProps) {\r\n    const [contents, setContents] = useState<GitHubContentResponse | null>(null)\r\n    const [svgItem, setSvgItem] = useState<GitHubContent | null>(null)\r\n\r\n    const fetchContents = async () => {\r\n        const contents = await gitHubApiQuery(gitHubAccess, item.url) as GitHubContentResponse\r\n        setContents(contents)\r\n\r\n        // Get SVG\r\n        contents.forEach(async (item: GitHubContent) => {\r\n            if (item.name === \"svg\") {\r\n                const svgContents = await gitHubApiQuery(gitHubAccess, item.url, false) as GitHubContentResponse\r\n                if (svgContents[0]) {\r\n                    const svgItem = svgContents[0]\r\n                    setSvgItem(svgItem)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (contents === null) {\r\n            fetchContents()\r\n        }\r\n    }, [contents])\r\n\r\n    return (\r\n        <div className=\"col-md-6\">\r\n            <div className=\"card mb-4\">\r\n                <div className=\"card-body\">\r\n                    <img src={svgItem?.download_url} className=\"mb-4\" alt={item.name} />\r\n                    <h5>{getPhrase(item.name)}</h5>\r\n\r\n                    {contents !== null &&\r\n                        <ButtonGroup>\r\n                            {contents.map((item: GitHubContent) =>\r\n                                <SuiteLogoItem key={item.sha} gitHubAccess={gitHubAccess} item={item} />\r\n                            )}\r\n                        </ButtonGroup>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\n\nimport { Page, Header, HeaderTitle, Body } from \"blue-react\"\n\nimport { appLogo, appTitle, GitHubAccess, gitHubApiQuery, GitHubContent, GitHubContentResponse, GitHubTreeResponse } from \"../shared\"\nimport { SuiteLogo } from \"../components/SuiteLogo\"\n\nexport interface HomePageProps {\n    gitHubAccess: GitHubAccess | null\n}\n\nfunction HomePage({ gitHubAccess }: HomePageProps) {\n    const [contents, setContents] = useState<GitHubContentResponse | null>(null)\n\n    const fetchContents = async (tree?: GitHubTreeResponse) => {\n        const contents = await gitHubApiQuery(gitHubAccess!, \"https://api.github.com/repos/bruegmann/design/contents/suite-logos/icons\") as GitHubContentResponse\n        setContents(contents)\n    }\n\n    useEffect(() => {\n        if (gitHubAccess !== null && contents === null) {\n            fetchContents()\n        }\n    }, [gitHubAccess, contents])\n\n    return (\n        <Page>\n            <Header>\n                <HeaderTitle logo={appLogo} appTitle={appTitle} />\n            </Header>\n\n            <Body containerClass=\"container pt-3\">\n                <div className=\"row\">\n                    <div className=\"col-md-7\">\n                        <h1 className=\"page-header\">Suite Logos</h1>\n                        <div className=\"row\">\n                            {contents !== null &&\n                                contents.map((item: GitHubContent) =>\n                                    <SuiteLogo gitHubAccess={gitHubAccess!} key={item.sha} item={item} />\n                                )\n                            }\n                        </div>\n                    </div>\n\n                </div>\n            </Body>\n        </Page>\n    )\n}\n\nexport default HomePage","import { Intro, Utilities } from \"blue-react\"\r\nimport React from \"react\"\r\nimport { BoxArrowRight } from \"react-bootstrap-icons\"\r\nimport GitHubLogin from \"react-github-login\"\r\nimport { appLogo, appTitle, getPhrase, GitHubAccess, gitHubOauthClientId, gitHubOauthUrl } from \"../shared\"\r\n\r\nexport interface SignInProps {\r\n    setGitHubAccess: (access: GitHubAccess) => void\r\n}\r\n\r\nexport function SignIn({ setGitHubAccess }: SignInProps) {\r\n    return (\r\n        <Intro logo={appLogo} title={appTitle}>\r\n            <div className=\"text-center\">\r\n                <p className=\"lead\">{getPhrase(\"Please sign in to see the content\")}</p>\r\n\r\n                <GitHubLogin\r\n                    clientId={gitHubOauthClientId}\r\n                    redirectUri=\"\"\r\n                    onSuccess={async ({ code }: { code: string }) => {\r\n                        const res = await fetch(`${gitHubOauthUrl}?code=${code}`)\r\n                        const access: GitHubAccess = await res.json()\r\n\r\n                        setGitHubAccess(access)\r\n                        localStorage.setItem(\"gitHubAccess\", JSON.stringify(access))\r\n                    }}\r\n                    onFailure={(response: any) => {\r\n                        console.error(response)\r\n                        Utilities.setAlertMessage(response.toString(), \"danger\", true)\r\n                    }}\r\n                    scope={['user', 'repo']}\r\n                    className=\"btn btn-primary btn-lg d-inline-flex align-items-center\"\r\n                >\r\n                    <BoxArrowRight className=\"mr-1\" /> Sign in with GitHub\r\n                </GitHubLogin>\r\n\r\n                <div className=\"mt-3\">\r\n                    <a href=\"http://ijbwiki.patorg.org/index.php/GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {getPhrase(\"Get access to GitHub\")}\r\n                    </a>\r\n                </div>\r\n                <div className=\"mt-5\">\r\n                    <small>\r\n                        &copy; {new Date().getFullYear()} Brügmann Software GmbH | <a href=\"https://patorg.de/de/datenschutzerklaerung-2/\" target=\"_blank\" rel=\"noopener noreferrer\">{getPhrase(\"Privacy policy\")}</a> | <a href=\"https://patorg.de/de/impressum/\">{getPhrase(\"Imprint\")}</a>\r\n                    </small>\r\n                </div>\r\n            </div>\r\n        </Intro>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport const GitHubIcon = () => (\r\n    <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n    >\r\n        <path d=\"M12 0C5.374 0 0 5.373 0 12c0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z\"></path>\r\n    </svg>\r\n)","import React, { useState } from \"react\"\nimport { Grid, SidebarMenu, MenuItem } from \"blue-react\"\nimport { BoxArrowLeft, House, List } from \"react-bootstrap-icons\"\nimport HomePage from \"./pages/HomePage\"\n\nimport \"./styles/main.scss\"\nimport { getPhrase, GitHubAccess } from \"./shared\"\nimport { SignIn } from \"./pages/SignIn\"\nimport { GitHubIcon } from \"./assets/icons\"\n\nfunction Auth({ gitHubAccess, setGitHubAccess }: any) {\n    if (gitHubAccess === null) {\n        return <SignIn setGitHubAccess={setGitHubAccess} />\n    }\n    else {\n        return <HomePage gitHubAccess={gitHubAccess} />\n    }\n}\n\nfunction App() {\n    let access = null\n    const fromStorage = localStorage.getItem(\"gitHubAccess\")\n    if (fromStorage) {\n        access = JSON.parse(fromStorage)\n    }\n\n    const [gitHubAccess, setGitHubAccess] = useState<GitHubAccess | null>(access)\n\n    const signOut = () => {\n        localStorage.removeItem(\"gitHubAccess\")\n        setGitHubAccess(null)\n    }\n\n    return (\n        <Grid\n            expandSidebar\n            sidebarToggleIconComponent={<List />}\n            pages={[\n                {\n                    name: \"home\",\n                    component: <Auth gitHubAccess={gitHubAccess} setGitHubAccess={setGitHubAccess} />\n                }\n            ]}\n        >\n            <SidebarMenu\n                bottomContent={\n                    <div className=\"fluent-btn\">\n                        <div className=\"fluent-btn-ball\" />\n\n                        <a\n                            href=\"https://github.com/bruegmann/design\"\n                            target=\"_blank\" rel=\"noopener noreferrer\"\n                            className=\"blue-app-sidebar-btn btn has-label\"\n                        >\n                            <GitHubIcon /> <span className=\"blue-app-sidebar-label\">{getPhrase(\"All assets on GitHub\")}</span>\n                        </a>\n\n                        {gitHubAccess !== null &&\n                            <MenuItem onClick={signOut} icon={<BoxArrowLeft />} label=\"Sign out\" />\n                        }\n                    </div>\n                }\n            >\n                <MenuItem href=\"#\" icon={<House />} label=\"Home\" isHome />\n            </SidebarMenu>\n        </Grid>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}