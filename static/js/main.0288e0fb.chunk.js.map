{"version":3,"sources":["logo.svg","icons/List.tsx","icons/House.tsx","shared.ts","pages/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Icon","xmlns","width","height","fill","className","viewBox","fillRule","d","appLogo","require","phrases","proxy","HomePage","whenClick","a","logo","appTitle","containerClass","keyword","countryCode","undefined","_phrases","navigator","language","toLowerCase","indexOf","_","onClick","clientId","redirectUri","onSuccess","code","console","log","fetch","method","headers","body","JSON","stringify","client_id","client_secret","res1","json","access","token_type","access_token","res","text","onFailure","response","error","scope","App","expandSidebar","sidebarToggleIconComponent","List","pages","name","component","href","icon","House","label","isHome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,kC,wGCwB5BC,MAlBf,WACI,OACI,yBACIC,MAAM,6BACNC,MAAM,MACNC,OAAO,MACPC,KAAK,eACLC,UAAU,aACVC,QAAQ,aAER,0BACIC,SAAS,UACTC,EAAE,yKCUHR,MAtBf,WACI,OACI,yBACIC,MAAM,6BACNC,MAAM,MACNC,OAAO,MACPC,KAAK,eACLC,UAAU,cACVC,QAAQ,aAER,0BACIC,SAAS,UACTC,EAAE,wJAEN,0BACID,SAAS,UACTC,EAAE,mH,wCCtBLC,EAAUC,EAAQ,IAOlBC,EAAoB,CAC7B,YAAe,CAAC,eAAgB,gBCUpC,IAAMC,EAAQ,+BA0FCC,MAxFf,WACI,IAAMC,EAAS,uCAAG,sBAAAC,EAAA,0FAAH,qDAsBf,OACI,kBAAC,OAAD,KACI,kBAAC,SAAD,KACI,kBAAC,cAAD,CAAaC,KAAMP,EAASQ,SD7CpB,gBC6CR,aAGJ,kBAAC,OAAD,CAAMC,eAAe,aACjB,wBAAIb,UAAU,aDvCvB,SAAmBc,GAA2G,IAA1FC,EAAyF,4DAAvDC,EAAWC,EAA4C,4DAAXD,EAIrH,OAHAD,EAAcA,GAAgBG,UAAUC,SAAUC,cAAcC,QAAQ,OAAS,EAAI,QAAU,SAC/FJ,EAAWA,GAAYX,GAEVQ,GACLC,EAAYM,QAAQ,QAAU,EACvBJ,EAASH,GAAS,GAGlBG,EAASH,GAAS,GAItBA,EC0B4BQ,CAAE,gBAE7B,4BACItB,UAAU,yBACVuB,QAASd,GAFb,4BAOA,kBAAC,IAAD,CACIe,SAAS,uBACTC,YAAY,GACZC,UAAS,uCAAE,qCAAAhB,EAAA,6DAASiB,EAAT,EAASA,KAChBC,QAAQC,IAAIF,GADL,SAGYG,MAAM,GAAD,OAAIvB,EAAJ,+CAAwD,CAC5EwB,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,UAAW,uBACXC,cAAe,2CACfV,WAZD,cAGDW,EAHC,OAgBPV,QAAQC,IAAIS,GAhBL,SAsB2EA,EAAKC,OAtBhF,cAsBDC,EAtBC,OAuBPZ,QAAQC,IAAIW,GAvBL,UAyBWV,MAAM,GAAD,OAAIvB,EAAJ,kEAA2E,CAC9FwB,OAAQ,MACRC,QAAS,CACL,cAAgB,GAAhB,OAAoBQ,EAAOC,WAA3B,YAAyCD,EAAOE,cAChD,eAAgB,sBA7BjB,eAyBDC,EAzBC,OAiCPf,QAAQC,IAAIc,GAjCL,UAmCYA,EAAIC,OAnChB,QAmCDL,EAnCC,OAoCPX,QAAQC,IAAIU,GApCL,4CAAF,sDAsCTM,UAAW,SAACC,GAAD,OAAmBlB,QAAQmB,MAAMD,IAC5CE,MAAO,CAAC,OAAQ,a,MCzErBC,MAnBf,WACI,OACI,kBAAC,OAAD,CACIC,eAAa,EACbC,2BAA4B,kBAACC,EAAD,MAC5BC,MAAO,CACH,CACIC,KAAM,OACNC,UAAW,kBAAC,EAAD,SAInB,kBAAC,cAAD,KACI,kBAAC,WAAD,CAAUC,KAAK,IAAIC,KAAM,kBAACC,EAAD,MAAWC,MAAM,OAAOC,QAAM,OCVnDC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBpD,WACrBA,UAAUqD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLnB,QAAQmB,MAAMA,EAAM8B,c","file":"static/js/main.0288e0fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\r\n\r\n/**\r\n * Icon is from Bootstrap Icons: https://icons.getbootstrap.com/\r\n */\r\n\r\nfunction Icon() {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"1em\"\r\n            height=\"1em\"\r\n            fill=\"currentColor\"\r\n            className=\"bi bi-list\"\r\n            viewBox=\"0 0 16 16\"\r\n        >\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M2.5 11.5A.5.5 0 013 11h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4A.5.5 0 013 7h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4A.5.5 0 013 3h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5z\"\r\n            ></path>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Icon","import React from \"react\"\r\n\r\n/**\r\n * Icon is from Bootstrap Icons: https://icons.getbootstrap.com/\r\n */\r\n\r\nfunction Icon() {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"1em\"\r\n            height=\"1em\"\r\n            fill=\"currentColor\"\r\n            className=\"bi bi-house\"\r\n            viewBox=\"0 0 16 16\"\r\n        >\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M2 13.5V7h1v6.5a.5.5 0 00.5.5h9a.5.5 0 00.5-.5V7h1v6.5a1.5 1.5 0 01-1.5 1.5h-9A1.5 1.5 0 012 13.5zm11-11V6l-2-2V2.5a.5.5 0 01.5-.5h1a.5.5 0 01.5.5z\"\r\n            ></path>\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M7.293 1.5a1 1 0 011.414 0l6.647 6.646a.5.5 0 01-.708.708L8 2.207 1.354 8.854a.5.5 0 11-.708-.708L7.293 1.5z\"\r\n            ></path>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Icon","export const appLogo = require(\"./logo.svg\")\nexport const appTitle = \"My App Title\"\n\ninterface IPhrases {\n    [key: string]: string[]\n}\n\nexport const phrases: IPhrases = {\n    \"HELLO_WORLD\": [\"Hello World!\", \"Hallo Welt!\"]\n}\n\nexport function getPhrase(keyword: string, countryCode: string | undefined = undefined, _phrases: IPhrases | undefined = undefined) {\n    countryCode = countryCode || (navigator.language).toLowerCase().indexOf(\"de\") > -1 ? \"de-DE\" : \"en-US\"\n    _phrases = _phrases || phrases\n\n    if (_phrases[keyword]) {\n        if (countryCode.indexOf(\"de-\") > -1) {\n            return _phrases[keyword][1]\n        }\n        else {\n            return _phrases[keyword][0]\n        }\n    }\n    else {\n        return keyword\n    }\n}","import React from \"react\"\nimport { Octokit } from \"@octokit/rest\"\nimport { createTokenAuth } from \"@octokit/auth-token\"\nimport GitHubLogin from \"react-github-login\"\n\nimport { Page, Header, HeaderTitle, Body } from \"blue-react\"\n\nimport { appLogo, appTitle, getPhrase as _ } from \"../shared\"\nimport { createOAuthAppAuth } from \"@octokit/auth-oauth-app\"\n\n// const octokit = new Octokit({\n//     authStrategy: createOAuthAppAuth,\n//     auth: {\n//         clientId: \"\"\n//     }\n// })\n\n// const proxy = \"http://localhost:90/php-proxy/own-proxy.php?csurl=\"\nconst proxy = \"http://localhost:4000/fetch/\"\n\nfunction HomePage() {\n    const whenClick = async () => {\n        // try {\n        //     const auth = createTokenAuth(\"adacdf77487f40bafae58263b8e398b39c9480c4\")\n        //     const { token, tokenType } = await auth()\n\n        //     const octokit = new Octokit({\n        //         auth: \"token\"\n        //     })\n\n        //     const { data } = await octokit.repos.get({\n        //         owner: \"bruegmann\",\n        //         repo: \"design\"\n        //     })\n        //     console.log(data)\n        // }\n        // catch (ex) {\n        //     console.error(ex)\n        // }\n\n\n    }\n\n    return (\n        <Page>\n            <Header>\n                <HeaderTitle logo={appLogo} appTitle={appTitle}>HomePage</HeaderTitle>\n            </Header>\n\n            <Body containerClass=\"container\">\n                <h1 className=\"mt-4 mb-3\">{_(\"HELLO_WORLD\")}</h1>\n\n                <button\n                    className=\"btn btn-lg btn-primary\"\n                    onClick={whenClick}\n                >\n                    Why don't you click this\n                    </button>\n\n                <GitHubLogin\n                    clientId=\"d64aa2c0928af6b72a90\"\n                    redirectUri=\"\"\n                    onSuccess={async ({ code }: { code: string }) => {\n                        console.log(code)\n\n                        const res1 = await fetch(`${proxy}https://github.com/login/oauth/access_token`, {\n                            method: \"POST\",\n                            headers: {\n                                \"Accept\": \"application/json\",\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({\n                                client_id: \"d64aa2c0928af6b72a90\",\n                                client_secret: \"adacdf77487f40bafae58263b8e398b39c9480c4\",\n                                code\n                            })\n                        })\n\n                        console.log(res1)\n\n                        // for (var pair of res1.headers.entries()) {\n                        //     console.log(pair[0] + ': ' + pair[1]);\n                        // }\n\n                        const access: { access_token: string, token_type: string, scope: string } = await res1.json()\n                        console.log(access)\n\n                        const res = await fetch(`${proxy}https://api.github.com/repos/bruegmann/design/git/trees/master`, {\n                            method: \"GET\",\n                            headers: {\n                                \"Authorization\": `${access.token_type} ${access.access_token}`,\n                                \"Content-Type\": \"application/json\"\n                            }\n                        })\n\n                        console.log(res)\n\n                        const json = await res.text()\n                        console.log(json)\n                    }}\n                    onFailure={(response: any) => console.error(response)}\n                    scope={['user', 'repo']}\n                />\n            </Body>\n        </Page>\n    )\n}\n\nexport default HomePage","import React from \"react\"\nimport { Grid, SidebarMenu, MenuItem } from \"blue-react\"\n\nimport List from \"./icons/List\"\nimport House from \"./icons/House\"\nimport HomePage from \"./pages/HomePage\"\n\nimport \"./styles/main.scss\"\n\nfunction App() {\n    return (\n        <Grid\n            expandSidebar\n            sidebarToggleIconComponent={<List />}\n            pages={[\n                {\n                    name: \"home\",\n                    component: <HomePage />\n                }\n            ]}\n        >\n            <SidebarMenu>\n                <MenuItem href=\"#\" icon={<House />} label=\"Home\" isHome />\n            </SidebarMenu>\n        </Grid>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}