{"version":3,"sources":["shared.ts","components/Footer.tsx","pages/FontAndColorsPage.tsx","components/SuiteLogoItem.tsx","components/SuiteLogo.tsx","pages/LogosPage.tsx","components/Icon.tsx","pages/IconsPage.tsx","pages/SignIn.tsx","assets/icons.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/logo.svg","assets/01-modern-system-fonts-preview.png"],"names":["appLogo","require","phrases","getPhrase","keyword","countryCode","undefined","_phrases","navigator","language","toLowerCase","indexOf","proxy","gitHubApiQuery","gitHubAccess","url","a","caching","headers","token_type","access_token","Utilities","fetchData","method","res","json","treeResponse","setAlertMessage","toString","Footer","className","Date","getFullYear","href","target","rel","FontAndColorsPage","colors","whenCopied","copiedText","setTimeout","resetAlertMessage","containerClass","Object","keys","map","colorWeight","colorCode","key","text","onCopy","style","backgroundColor","height","title","cursor","src","alt","SuiteLogoItem","item","useState","files","setFiles","dropdownOpen","setDropdownOpen","fetchFiles","sort","b","aNumber","parseInt","name","bNumber","useEffect","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","file","sha","download_url","SuiteLogo","doFetch","onFetched","contents","setContents","svgItem","setSvgItem","fetchContents","forEach","svgContents","ButtonGroup","LogosPage","currentFetch","setCurrentFetch","Array","isArray","Icon","state","colorIcon","componentName","prevProps","blueIconColoredOn","this","props","componentDidMount","str","arr","replace","split","newStr","i","length","charAt","toUpperCase","slice","hyphensToCamelCase","icon","iconName","setState","BlueIconColored","marginTop","marginBottom","biCclass","biAclass","whiteSpace","React","Component","IconsPage","itemsToShow","setItemsToShow","setBlueIconColoredOn","search","setSearch","showAllItems","keywords","body","reset","autoFocus","placeholder","value","onChange","checked","onClick","prompt","includes","join","SignIn","setGitHubAccess","logo","clientId","redirectUri","onSuccess","code","fetch","access","localStorage","setItem","JSON","stringify","onFailure","response","console","error","scope","GitHubIcon","xmlns","width","viewBox","fill","d","Auth","TheComponent","App","fromStorage","getItem","parse","expandSidebar","sidebarToggleIconComponent","pages","component","statusIcons","danger","info","success","warning","disableHeaders","appTitle","sidebar","bottomContent","removeItem","label","isHome","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.891de425.chunk.js","sourcesContent":["import { Utilities } from \"blue-react\"\n\nexport const appLogo = require(\"./assets/logo.svg\")\nexport const appTitle = \"Corporate Design\"\n\ninterface IPhrases {\n    [key: string]: string[]\n}\n\nexport const phrases: IPhrases = {\n    \"All assets on GitHub\": [\"All assets on GitHub\", \"Alle Assets auf GitHub\"],\n    \"Please sign in to see the content\": [\"Please sign in to see the content\", \"Bitte anmelden, um die Inhalte sehen zu können\"],\n    \"Get access to GitHub\": [\"Get access to GitHub\", \"Zugang zu GitHub bekommen\"],\n    \"Privacy policy\": [\"Privacy policy\", \"Datenschutzerklärung\"],\n    \"Imprint\": [\"Imprint\", \"Impressum\"],\n    \"Sign in with GitHub\": [\"Sign in with GitHub\", \"Anmelden mit GitHub\"]\n}\n\nexport function getPhrase(keyword: string, countryCode: string | undefined = undefined, _phrases: IPhrases | undefined = undefined) {\n    countryCode = countryCode || (navigator.language).toLowerCase().indexOf(\"de\") > -1 ? \"de-DE\" : \"en-US\"\n    _phrases = _phrases || phrases\n\n    if (_phrases[keyword]) {\n        if (countryCode.indexOf(\"de-\") > -1) {\n            return _phrases[keyword][1]\n        }\n        else {\n            return _phrases[keyword][0]\n        }\n    }\n    else {\n        return keyword\n    }\n}\n\n// export const gitHubOauthUrl = \"http://localhost:4000/login/oauth/access_token\"\n// export const proxy = \"http://localhost:4000/fetch/\"\n\nexport const gitHubOauthUrl = \"https://github-proxy.patorg.de/login/oauth/access_token\"\nexport const proxy = \"https://github-proxy.patorg.de/fetch/\"\n\n// In production (bruegmann.github.io) we need another client ID then in development (localhost:3000)\nexport const gitHubOauthClientId = (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") ? \"d64aa2c0928af6b72a90\" : \"0e88710af11826fb210a\"\n\nexport interface GitHubAccess {\n    access_token: string\n    token_type: string\n    scope: string\n}\n\nexport interface GitHubTreeResponse {\n    sha: string\n    url: string\n    truncated?: boolean\n    tree: GitHubTree[]\n}\n\nexport interface GitHubTree {\n    path: string\n    mode: string\n    type: string\n    sha: string\n    size: number\n    url: string\n}\n\nexport type GitHubContentResponse = GitHubContent[]\n\nexport interface GitHubContent {\n    download_url?: string\n    git_url: string\n    html_url: string\n    name: string\n    path: string\n    sha: string\n    size: number\n    type: string\n    url: string\n    _links: GitHubLink\n}\n\nexport interface GitHubLink {\n    git: string\n    html: string\n    self: string\n}\n\nexport async function gitHubApiQuery(gitHubAccess: GitHubAccess, url: string, caching: boolean = true): Promise<GitHubTreeResponse | GitHubContentResponse> {\n    let headers = {\n        \"Authorization\": `${gitHubAccess.token_type} ${gitHubAccess.access_token}`,\n        \"Content-Type\": \"application/json\",\n        \"cache-control\": \"no-cache\"\n    }\n\n    if (caching === false) {\n        headers[\"cache-control\"] = \"no-cache\"\n    }\n\n    try {\n        const res = await Utilities.fetchData(`${proxy}${url}`, {\n            method: \"GET\",\n            headers\n        })\n\n        const treeResponse = await res.json()\n        return treeResponse\n    }\n    catch (ex) {\n        Utilities.setAlertMessage(\"An error occured\", \"danger\", true, ex.toString())\n    }\n}\n\nexport interface BlueiconKeywordsItem {\n    iconName: string\n    keywords: string[]\n}\n\nexport interface DesignSitePageProps {\n    gitHubAccess: GitHubAccess | null\n}","import React from \"react\"\r\nimport { getPhrase } from \"../shared\"\r\n\r\nexport function Footer() {\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <small>\r\n                &copy; {new Date().getFullYear()} Brügmann Software GmbH | <a href=\"https://patorg.de/de/datenschutzerklaerung-2/\" target=\"_blank\" rel=\"noopener noreferrer\">{getPhrase(\"Privacy policy\")}</a> | <a href=\"https://patorg.de/de/impressum/\">{getPhrase(\"Imprint\")}</a>\r\n            </small>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { Page, Body, FluentBtn, Utilities } from \"blue-react\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\n\r\nimport { DesignSitePageProps } from \"../shared\"\r\nimport { Footer } from \"../components/Footer\"\r\n\r\nfunction FontAndColorsPage({ gitHubAccess }: DesignSitePageProps) {\r\n    const colors = {\r\n        \"normal\": \"2980B9\",\r\n        \"heller\": \"3498DB\",\r\n        \"dunkler\": \"096EB0\",\r\n        \"sehr dunkel\": \"07507F\",\r\n    }\r\n\r\n    const whenCopied = (copiedText: string) => {\r\n        Utilities.setAlertMessage(`\"${copiedText}\" erfolgreich kopiert`, \"success\", true)\r\n        setTimeout(() => {\r\n            Utilities.resetAlertMessage(\"success\")\r\n        }, 2000)\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n            <Body containerClass=\"container pt-3\">\r\n                <article>\r\n                    <h1 className=\"page-header\">Primärfarben</h1>\r\n\r\n                    <div className=\"row\">\r\n                        {Object.keys(colors).map((colorWeight: string) => {\r\n                            const colorCode = colors[colorWeight]\r\n                            return (\r\n                                <div key={colorWeight} className=\"col\">\r\n                                    <CopyToClipboard text={`#${colorCode}`} onCopy={whenCopied}>\r\n                                        <FluentBtn\r\n                                            className=\"btn btn-block\"\r\n                                            style={{ backgroundColor: `#${colorCode}`, height: \"4rem\" }}\r\n                                            title=\"Klicken, um Code zu kopieren\"\r\n                                        />\r\n                                    </CopyToClipboard>\r\n\r\n                                    <p className=\"lead\">\r\n                                        {`#${colorCode}`}\r\n                                    </p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </article>\r\n\r\n                <article>\r\n                    <h1 className=\"page-header\">Work Sans</h1>\r\n                    <p>\r\n                        Die Work Sans wird u.a. auf unserer Website <a href=\"https://patorg.de\" target=\"_blank\" rel=\"noopener noreferrer\">patorg.de</a> und auch in dieser Dokumentation verwendet.{\" \"}\r\n                        Die Schriftarten wurden designt von Wei Huang und stehen unter <a href=\"https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL\" target=\"_blank\" rel=\"noopener noreferrer\">Open Font License</a>.\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"https://fonts.google.com/specimen/Work+Sans\" target=\"_blank\" rel=\"noopener noreferrer\">Work Sans bei Google Fonts</a>\r\n                    </p>\r\n                </article>\r\n\r\n                <article>\r\n                    <h1 className=\"page-header\">Schriftarten in Produkten</h1>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"thumbnail\">\r\n                                <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc246ff9-d8cd-4f51-9836-ce2528cdc5f0/01-modern-system-fonts.png\" style={{ cursor: \"zoom-in\" }}>\r\n                                    <img src={require(\"../assets/01-modern-system-fonts-preview.png\")} alt=\"Für jedes System die richtige Schriftart\" />\r\n                                </a>\r\n                                <div className=\"caption\">\r\n                                    Quelle: <a href=\"https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/\">Smashing Magazine</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <p>\r\n                                Statt eine eigene Schriftart zu verwenden, wird in Produkten von uns auf die jeweilige System-Font zurückgegriffen. Bei Windows ist das\r\n                                z.B. \"Segoe UI\", bei Mac OS \"San Francisco\" und bei Android \"Roboto\".\r\n                        </p>\r\n                            <p>\r\n                                Bei klassischen Windows-Anwendungen ist \"Segoe UI\" bereits die Standard-Font.<br />\r\n                                    Für Web-Anwendungen kann die System-Font mithilfe dieses CSS-Snippets festgelegt werden:\r\n                        </p>\r\n\r\n                            <pre>{`body {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\r\n}`}</pre>\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n\r\n                <Footer />\r\n            </Body>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default FontAndColorsPage","import React, { useEffect, useState } from \"react\"\r\nimport { ButtonDropdown, DropdownMenu, DropdownToggle } from \"reactstrap\"\r\nimport { GitHubAccess, gitHubApiQuery, GitHubContent, GitHubContentResponse } from \"../shared\"\r\n\r\nexport interface SuiteLogoItemProps {\r\n    gitHubAccess: GitHubAccess\r\n    item: GitHubContent\r\n}\r\n\r\nexport function SuiteLogoItem({ gitHubAccess, item }: SuiteLogoItemProps) {\r\n    const [files, setFiles] = useState<GitHubContentResponse | null>(null)\r\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false)\r\n    const toggleDropdownOpen = () => setDropdownOpen(!dropdownOpen)\r\n\r\n    const fetchFiles = async () => {\r\n        let files = await gitHubApiQuery(gitHubAccess, item.url, false) as GitHubContentResponse\r\n        files = files.sort((a: GitHubContent, b: GitHubContent) => {\r\n            const aNumber = parseInt(a.name)\r\n            const bNumber = parseInt(b.name)\r\n\r\n            if (aNumber < bNumber) {\r\n                return -1\r\n            }\r\n            if (aNumber > bNumber) {\r\n                return 1\r\n            }\r\n\r\n            return 0\r\n        })\r\n        setFiles(files)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dropdownOpen === true && files === null) {\r\n            fetchFiles()\r\n        }\r\n    }, [dropdownOpen])\r\n\r\n    return (\r\n        <ButtonDropdown isOpen={dropdownOpen} toggle={toggleDropdownOpen}>\r\n            <DropdownToggle caret>\r\n                {item.name}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n                {files !== null &&\r\n                    files.map((file: GitHubContent) =>\r\n                        <a key={file.sha} className=\"dropdown-item\" href={file.download_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            {file.name}\r\n                        </a>\r\n                    )\r\n                }\r\n            </DropdownMenu>\r\n        </ButtonDropdown>\r\n    )\r\n    // }\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { ButtonGroup } from \"reactstrap\"\r\nimport { GitHubAccess, gitHubApiQuery, GitHubContent, GitHubContentResponse } from \"../shared\"\r\nimport { SuiteLogoItem } from \"./SuiteLogoItem\"\r\n\r\nexport interface SuiteLogoProps {\r\n    doFetch: boolean\r\n    gitHubAccess: GitHubAccess\r\n    item: GitHubContent\r\n    onFetched: () => void\r\n}\r\n\r\nexport function SuiteLogo({ doFetch, gitHubAccess, item, onFetched }: SuiteLogoProps) {\r\n    const [contents, setContents] = useState<GitHubContentResponse | null>(null)\r\n    const [svgItem, setSvgItem] = useState<GitHubContent | null>(null)\r\n\r\n    const fetchContents = async () => {\r\n        const contents = await gitHubApiQuery(gitHubAccess, item.url) as GitHubContentResponse\r\n        if (contents) {\r\n            setContents(contents)\r\n\r\n            // Get SVG\r\n            contents.forEach(async (item: GitHubContent) => {\r\n                if (item.name === \"svg\") {\r\n                    const svgContents = await gitHubApiQuery(gitHubAccess, item.url, false) as GitHubContentResponse\r\n                    onFetched()\r\n                    if (svgContents[0]) {\r\n                        const svgItem = svgContents[0]\r\n                        setSvgItem(svgItem)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Only fetch, when current item is defined to. This way one item will loaded after the other to avoid too many API calls at a time.\r\n        if (contents === null && doFetch === true) {\r\n            fetchContents()\r\n        }\r\n    }, [contents, doFetch])\r\n\r\n    return (\r\n        <div className=\"col-sm-6 col-lg-4 col-xl-3\">\r\n            <div className=\"card mb-4\">\r\n                <div className=\"card-body\">\r\n                    {contents !== null ?\r\n                        <>\r\n                            <div className=\"square mb-4\">\r\n                                <div className=\"content\">\r\n                                    {svgItem !== null ?\r\n                                        <img src={svgItem?.download_url} className=\"rs\" alt={item.name} />\r\n                                        :\r\n                                        <div className=\"ph-item no-border\">\r\n                                            <div className=\"ph-col-12\">\r\n                                                <div className=\"square mb-4\">\r\n                                                    <div className=\"content\">\r\n                                                        <div className=\"ph-picture rs loading\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <h5>{item.name}</h5>\r\n\r\n                            <ButtonGroup>\r\n                                {contents.map((item: GitHubContent) =>\r\n                                    <SuiteLogoItem key={item.sha} gitHubAccess={gitHubAccess} item={item} />\r\n                                )}\r\n                            </ButtonGroup>\r\n                        </>\r\n                        :\r\n                        <div className=\"ph-item no-border\">\r\n                            <div className=\"ph-col-12\">\r\n                                <div className=\"square mb-4\">\r\n                                    <div className=\"content\">\r\n                                        <div className=\"ph-picture rs loading\" />\r\n                                    </div>\r\n                                </div>\r\n                                <h5>{item.name}</h5>\r\n\r\n                                <div className=\"ph-row\">\r\n                                    <div className=\"ph-col-6 big\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\n\nimport { Page, Body } from \"blue-react\"\n\nimport { DesignSitePageProps, gitHubApiQuery, GitHubContent, GitHubContentResponse } from \"../shared\"\nimport { SuiteLogo } from \"../components/SuiteLogo\"\nimport { Footer } from \"../components/Footer\"\n\nfunction LogosPage({ gitHubAccess }: DesignSitePageProps) {\n    const [contents, setContents] = useState<GitHubContentResponse | null>(null)\n    const [currentFetch, setCurrentFetch] = useState<number>(0)\n\n    const fetchContents = async () => {\n        const contents = await gitHubApiQuery(gitHubAccess!, \"https://api.github.com/repos/bruegmann/design/contents/suite-logos/icons\") as GitHubContentResponse\n        setContents(contents)\n    }\n\n    useEffect(() => {\n        if (gitHubAccess !== null && contents === null) {\n            fetchContents()\n        }\n    }, [gitHubAccess, contents])\n\n    return (\n        <Page>\n            <Body containerClass=\"container pt-3\">\n                <article>\n                    <h1 className=\"page-header\">Organisations- und Produkt-Logos</h1>\n                    <div className=\"row\">\n                        {contents !== null && Array.isArray(contents) &&\n                            contents.map((item: GitHubContent, key: number) =>\n                                <SuiteLogo\n                                    gitHubAccess={gitHubAccess!}\n                                    key={item.sha}\n                                    item={item}\n                                    doFetch={currentFetch === key}\n                                    onFetched={() => setCurrentFetch(key + 1)}\n                                />\n                            )\n                        }\n                    </div>\n                </article>\n\n                <Footer />\n            </Body>\n        </Page>\n    )\n}\n\nexport default LogosPage","import React, { ReactNode } from \"react\"\r\nimport BlueIconColored from \"blueicon-colored\"\r\nimport { BlueiconKeywordsItem } from \"../shared\"\r\n\r\n// Convert to correct camel case for component names\r\nfunction hyphensToCamelCase(str) {\r\n    str = str.replace(\"-\", \"_\")\r\n\r\n    var arr = str.split(/[_-]/)\r\n    var newStr = \"\"\r\n    for (var i = 0; i < arr.length; i++) {\r\n        newStr += arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\r\n    }\r\n    return newStr\r\n}\r\n\r\ninterface IconProps {\r\n    icon?: BlueiconKeywordsItem\r\n    blueIconColoredOn?: boolean\r\n    biCclass?: string\r\n    biAclass?: string\r\n}\r\n\r\ninterface IconState {\r\n    colorIcon: null | ReactNode\r\n    componentName: null | string\r\n}\r\n\r\nclass Icon extends React.Component<IconProps, IconState> {\r\n    state = {\r\n        colorIcon: null,\r\n        componentName: null\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.blueIconColoredOn != this.props.blueIconColoredOn) {\r\n            this.componentDidMount()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.blueIconColoredOn) {\r\n            const componentName = hyphensToCamelCase(this.props.icon.iconName)\r\n\r\n            this.setState({\r\n                colorIcon: BlueIconColored[componentName],\r\n                componentName: componentName\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <h2 className=\"text-center\" style={{ marginTop: \"0\", marginBottom: \"0\" }}>\r\n                        {this.props.blueIconColoredOn && this.state.colorIcon ?\r\n                            <this.state.colorIcon />\r\n                            : <span className={\"bi-\" + this.props.icon.iconName +\r\n                                (this.props.biCclass != \"\" ? \" bi-c-\" + this.props.biCclass : \"\") +\r\n                                (this.props.biAclass != \"\" ? \" bi-a-\" + this.props.biAclass : \"\")} />}\r\n                    </h2>\r\n                </div>\r\n\r\n                <div className=\"col-9\">\r\n                    <code style={{ whiteSpace: \"pre-wrap\" }}>\r\n                        {(this.props.blueIconColoredOn && this.state.componentName) ?\r\n                            `import { ${this.state.componentName} } from \"blueicon-colored\";\\n<${this.state.componentName} />` :\r\n                            `<span className=\"bi-` + this.props.icon.iconName +\r\n                            (this.props.biCclass != \"\" ? \" bi-c-\" + this.props.biCclass : \"\") +\r\n                            (this.props.biAclass != \"\" ? \" bi-a-\" + this.props.biAclass : \"\") +\r\n                            `\" />`}\r\n                    </code>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Icon","import { Body, FluentBtn, Page, Search, Switch } from \"blue-react\"\r\nimport React, { useState } from \"react\"\r\nimport { Bootstrap, Code } from \"react-bootstrap-icons\"\r\nimport { BlueiconKeywordsItem } from \"../shared\"\r\nimport keywords from \"../data/blueicon-keywords.json\"\r\nimport Icon from \"../components/Icon\"\r\nimport { Footer } from \"../components/Footer\"\r\n\r\nfunction IconsPage() {\r\n    const [itemsToShow, setItemsToShow] = useState<number>(40)\r\n    const [blueIconColoredOn, setBlueIconColoredOn] = useState<boolean>(false)\r\n    const toggleBlueIconColoredOn = () => setBlueIconColoredOn(!blueIconColoredOn)\r\n    const [biCclass, setBiCclass] = useState<string>(\"\")\r\n    const [biAclass, setBiAclass] = useState<string>(\"\")\r\n    const [search, setSearch] = useState<string>(\"\")\r\n\r\n    const showAllItems = () => {\r\n        setItemsToShow(keywords.length)\r\n    }\r\n\r\n    const onSearchChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (target.value !== \"\") {\r\n            showAllItems()\r\n        }\r\n\r\n        setSearch(target.value)\r\n    }\r\n\r\n    const showPathToOCollectionInternal = () => {\r\n        prompt(\"Dafür einmal diese URL im Browser aufrufen:\", \"file:///Q:/VBRest.NET/Icons%20%28gekaufte%29/o_collection/search.html\")\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n            <Body containerClass=\"container pt-3\">\r\n                <article>\r\n                    <h1 className=\"page-header\">Bootstrap Icons</h1>\r\n                    <a href=\"https://icons.getbootstrap.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><Bootstrap /> Übersicht aller Icons</a><br />\r\n                    <a href=\"https://www.npmjs.com/package/react-bootstrap-icons\" target=\"_blank\" rel=\"noopener noreferrer\"><Code /> Icons als React Komponenten</a>\r\n                </article>\r\n\r\n                <article>\r\n                    <h1 className=\"page-header\">O-Collection</h1>\r\n                    <p>\r\n                        Von uns erworbene Icon-Collection von INCORS. Kann mit unserer Library{\" \"}\r\n                        <a href=\"https://github.com/bruegmann/blueicon\" target=\"_blank\" rel=\"noopener noreferrer\">blueicon</a>, bzw.{\" \"}\r\n                        <a href=\"https://github.com/bruegmann/blueicon-colored\" target=\"_blank\" rel=\"noopener noreferrer\">blueicon-colored</a>{\" \"}\r\n                        bequem in Web-Anwendungen eingebunden werden.<br />\r\n                        Die O-Collection darf nicht sublizensiert werden, deswegen wird sie nicht in Open Source-Projekten von uns verwendet.\r\n                    </p>\r\n\r\n                    <div className=\"row mb-3 align-items-center\">\r\n                        <div className=\"col\">\r\n                            <Search\r\n                                body\r\n                                reset\r\n                                autoFocus\r\n                                placeholder=\"Icons durchsuchen...\"\r\n                                value={search}\r\n                                onChange={onSearchChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <label className=\"d-inline-flex align-items-center mb-0\">\r\n                                <Switch checked={blueIconColoredOn} onChange={toggleBlueIconColoredOn} className=\"mr-1 mb-0\" /> {\"Mehrfarbige Icons\"}\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"col\">\r\n                            <FluentBtn className=\"btn btn-outline-secondary btn-block\" onClick={showPathToOCollectionInternal}>\r\n                                {\"Als PNG/SVG/XAML\"}\r\n                            </FluentBtn>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        {keywords.map((icon: BlueiconKeywordsItem, i: number) =>\r\n                            (\r\n                                (icon.iconName.includes(search)) || (icon.keywords.join(\",\").includes(search))\r\n                            ) &&\r\n                            (i <= itemsToShow) &&\r\n                            <div key={i} className=\"col-md-6 mb-4\">\r\n                                <Icon\r\n                                    icon={icon}\r\n                                    blueIconColoredOn={blueIconColoredOn}\r\n                                    biCclass={biCclass}\r\n                                    biAclass={biAclass}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {itemsToShow < keywords.length &&\r\n                        <FluentBtn className=\"btn btn-secondary btn-block\" onClick={showAllItems}>\r\n                            {\"Alle anzeigen\"}\r\n                        </FluentBtn>\r\n                    }\r\n                </article>\r\n\r\n                <Footer />\r\n            </Body>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default IconsPage","import { Intro, Utilities } from \"blue-react\"\r\nimport React from \"react\"\r\nimport { BoxArrowRight } from \"react-bootstrap-icons\"\r\nimport GitHubLogin from \"react-github-login\"\r\nimport { Footer } from \"../components/Footer\"\r\nimport { appLogo, appTitle, getPhrase, GitHubAccess, gitHubOauthClientId, gitHubOauthUrl } from \"../shared\"\r\n\r\nexport interface SignInProps {\r\n    setGitHubAccess: (access: GitHubAccess) => void\r\n}\r\n\r\nexport function SignIn({ setGitHubAccess }: SignInProps) {\r\n    return (\r\n        <Intro logo={appLogo} title={appTitle}>\r\n            <div className=\"text-center\">\r\n                <p className=\"lead\">{getPhrase(\"Please sign in to see the content\")}</p>\r\n\r\n                <GitHubLogin\r\n                    clientId={gitHubOauthClientId}\r\n                    redirectUri=\"\"\r\n                    onSuccess={async ({ code }: { code: string }) => {\r\n                        const res = await fetch(`${gitHubOauthUrl}?code=${code}`)\r\n                        const access: GitHubAccess = await res.json()\r\n\r\n                        setGitHubAccess(access)\r\n                        localStorage.setItem(\"gitHubAccess\", JSON.stringify(access))\r\n                    }}\r\n                    onFailure={(response: any) => {\r\n                        console.error(response)\r\n                        Utilities.setAlertMessage(response.toString(), \"danger\", true)\r\n                    }}\r\n                    scope={['user', 'repo']}\r\n                    className=\"btn btn-primary btn-lg d-inline-flex align-items-center\"\r\n                >\r\n                    <BoxArrowRight className=\"mr-1\" /> Sign in with GitHub\r\n                </GitHubLogin>\r\n\r\n                <div className=\"mt-3\">\r\n                    <a href=\"http://ijbwiki.patorg.org/index.php/GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {getPhrase(\"Get access to GitHub\")}\r\n                    </a>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n        </Intro>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport const GitHubIcon = () => (\r\n    <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"currentColor\"\r\n    >\r\n        <path d=\"M12 0C5.374 0 0 5.373 0 12c0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z\"></path>\r\n    </svg>\r\n)","import React, { useState } from \"react\"\nimport { Grid, SidebarMenu, MenuItem, HeaderTitle } from \"blue-react\"\nimport { BadgeTm, BoxArrowLeft, CheckCircleFill, Collection, Droplet, ExclamationCircleFill, House, Images, InfoCircleFill, List, XCircleFill } from \"react-bootstrap-icons\"\nimport FontAndColorsPage from \"./pages/FontAndColorsPage\"\nimport LogosPage from \"./pages/LogosPage\"\nimport IconsPage from \"./pages/IconsPage\"\n\nimport \"./styles/main.scss\"\nimport { appLogo, appTitle, getPhrase, GitHubAccess } from \"./shared\"\nimport { SignIn } from \"./pages/SignIn\"\nimport { GitHubIcon } from \"./assets/icons\"\n\nfunction Auth({ gitHubAccess, setGitHubAccess, TheComponent }: any) {\n    if (gitHubAccess === null) {\n        return <SignIn setGitHubAccess={setGitHubAccess} />\n    }\n    else {\n        return <TheComponent gitHubAccess={gitHubAccess} />\n    }\n}\n\nfunction App() {\n    let access = null\n    const fromStorage = localStorage.getItem(\"gitHubAccess\")\n    if (fromStorage) {\n        access = JSON.parse(fromStorage)\n    }\n\n    const [gitHubAccess, setGitHubAccess] = useState<GitHubAccess | null>(access)\n\n    const signOut = () => {\n        localStorage.removeItem(\"gitHubAccess\")\n        setGitHubAccess(null)\n    }\n\n    return (\n        <Grid\n            expandSidebar\n            sidebarToggleIconComponent={<List />}\n            pages={[\n                {\n                    name: \"home\",\n                    component: <Auth gitHubAccess={gitHubAccess} setGitHubAccess={setGitHubAccess} TheComponent={FontAndColorsPage} />\n                },\n                {\n                    name: \"logos\",\n                    component: <Auth gitHubAccess={gitHubAccess} setGitHubAccess={setGitHubAccess} TheComponent={LogosPage} />\n                },\n                {\n                    name: \"icons\",\n                    component: <Auth gitHubAccess={gitHubAccess} setGitHubAccess={setGitHubAccess} TheComponent={IconsPage} />\n                }\n            ]}\n            statusIcons={{\n                danger: <XCircleFill />,\n                info: <InfoCircleFill />,\n                success: <CheckCircleFill />,\n                warning: <ExclamationCircleFill />\n            }}\n            disableHeaders\n        >\n            <HeaderTitle logo={appLogo} appTitle=\"Design\" sidebar />\n\n            <SidebarMenu\n                bottomContent={\n                    <div className=\"fluent-btn\">\n                        <div className=\"fluent-btn-ball\" />\n\n                        <a\n                            href=\"https://github.com/bruegmann/design\"\n                            target=\"_blank\" rel=\"noopener noreferrer\"\n                            className=\"blue-app-sidebar-btn btn has-label\"\n                        >\n                            <GitHubIcon /> <span className=\"blue-app-sidebar-label\">{getPhrase(\"All assets on GitHub\")}</span>\n                        </a>\n\n                        <a\n                            href=\"https://bruegmann.github.io/blue-react\"\n                            target=\"_blank\" rel=\"noopener noreferrer\"\n                            className=\"blue-app-sidebar-btn btn has-label\"\n                        >\n                            <Collection /> <span className=\"blue-app-sidebar-label\">Blue React</span>\n                        </a>\n\n                        {gitHubAccess !== null &&\n                            <MenuItem onClick={signOut} icon={<BoxArrowLeft />} label=\"Sign out\" />\n                        }\n                    </div>\n                }\n            >\n                <MenuItem href=\"#/home\" icon={<Droplet />} label=\"Fonts und Farben\" isHome />\n                <MenuItem href=\"#/logos\" icon={<BadgeTm />} label=\"Product-Logos\" />\n                <MenuItem href=\"#/icons\" icon={<Images />} label=\"Icons\" />\n            </SidebarMenu>\n        </Grid>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.7414e0dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/01-modern-system-fonts-preview.94c07a56.png\";"],"sourceRoot":""}